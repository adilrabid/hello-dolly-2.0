{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACoD;AAOnB;AAC4B;;AAE7D;AACAA,oEAAiB,CAAC,+BAA+B,EAAE;EAC/CO,UAAU,EAAE;IACR;IACA;IACA;IACA;IACAC,QAAQ,EAAE;MAACC,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAS,CAAC;IAC9CC,UAAU,EAAE;MAACF,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAS;EACnD,CAAC;EACDE,IAAI,EAAEC,IAAA,IAAiC;IAAA,IAAhC;MAACN,UAAU;MAAEO;IAAa,CAAC,GAAAD,IAAA;IAC9B,MAAME,UAAU,GAAGd,sEAAa,EAAE;;IAElC;IACA;IACA;IACA;IACA;;IAEA,MAAMe,iBAAiB,GAAIC,QAAQ,IAAK;MACpCH,aAAa,CAAC;QAACH,UAAU,EAAEM;MAAQ,CAAC,CAAC;IACzC,CAAC;IAED,MAAMC,eAAe,GAAID,QAAQ,IAAK;MAClCH,aAAa,CAAC;QAACN,QAAQ,EAAES;MAAQ,CAAC,CAAC;IACvC,CAAC;IAED,OACIE,iEAAA,CAAAC,wDAAA,QACID,iEAAA,CAAChB,kEAAa,OAKE,EAChBgB,iEAAA,CAACd,sEAAiB;MAACgB,GAAG,EAAC;IAAS,GAC5BF,iEAAA;MAAKG,EAAE,EAAC;IAAqB,GACzBH,iEAAA,mBACIA,iEAAA;MAAQI,SAAS,EAAC;IAA4B,GAAC,YAE/C,CAAS,EACTJ,iEAAA,CAACf,iEAAY,CAAC;IAAA;MACVoB,QAAQ,EAAER,iBAAkB,CAAC;IAAA,EAC/B,CACK,EACXG,iEAAA,mBACIA,iEAAA;MAAQI,SAAS,EAAC;IAA4B,GAAC,kBAE/C,CAAS,EACTJ,iEAAA,CAACf,iEAAY,CAAC;IAAA;MACVoB,QAAQ,EAAEN,eAAgB,CAAC;IAAA,EAC7B,CACK,CACT,CACU,EACpBC,iEAAA,CAACb,sEAAgB;MACbmB,KAAK,EAAC;IAA+B,EACvC,CASH;EAEX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC,CAAC,C","sources":["webpack://wp-hello-dolly/external window [\"wp\",\"blockEditor\"]","webpack://wp-hello-dolly/external window [\"wp\",\"blocks\"]","webpack://wp-hello-dolly/external window [\"wp\",\"element\"]","webpack://wp-hello-dolly/external window [\"wp\",\"serverSideRender\"]","webpack://wp-hello-dolly/webpack/bootstrap","webpack://wp-hello-dolly/webpack/runtime/compat get default export","webpack://wp-hello-dolly/webpack/runtime/define property getters","webpack://wp-hello-dolly/webpack/runtime/hasOwnProperty shorthand","webpack://wp-hello-dolly/webpack/runtime/make namespace object","webpack://wp-hello-dolly/./src/index.js"],"sourcesContent":["module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"serverSideRender\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * WordPress dependencies\n */\nimport {registerBlockType} from '@wordpress/blocks';\nimport {\n    useBlockProps,\n    AlignmentToolbar,\n    BlockControls,\n    ColorPalette,\n    InspectorControls,\n} from '@wordpress/block-editor';\nimport ServerSideRender from '@wordpress/server-side-render';\n\n// Register the block\nregisterBlockType('adilrabid/hello-dolly-2-block', {\n    attributes: {\n        // alignment: {\n        //     type: 'string',\n        //     default: 'none',\n        // },\n        bg_color: {type: 'string', default: '#000000'},\n        text_color: {type: 'string', default: '#ffffff'},\n    },\n    edit: ({attributes, setAttributes}) => {\n        const blockProps = useBlockProps();\n\n        // const onChangeAlignment = ( newAlignment ) => {\n        //     setAttributes( {\n        //         alignment: newAlignment === undefined ? 'none' : newAlignment,\n        //     } );\n        // };\n\n        const onChangeTextColor = (hexColor) => {\n            setAttributes({text_color: hexColor});\n        };\n\n        const onChangeBGColor = (hexColor) => {\n            setAttributes({bg_color: hexColor});\n        };\n\n        return (\n            <>\n                <BlockControls>\n                    {/*<AlignmentToolbar*/}\n                    {/*    value={ attributes.alignment }*/}\n                    {/*    onChange={ onChangeAlignment }*/}\n                    {/*/>*/}\n                </BlockControls>\n                <InspectorControls key=\"setting\">\n                    <div id=\"gutenpride-controls\">\n                        <fieldset>\n                            <legend className=\"blocks-base-control__label\">\n                                Text color\n                            </legend>\n                            <ColorPalette // Element Tag for Gutenberg standard colour selector\n                                onChange={onChangeTextColor} // onChange event callback\n                            />\n                        </fieldset>\n                        <fieldset>\n                            <legend className=\"blocks-base-control__label\">\n                                Background color\n                            </legend>\n                            <ColorPalette // Element Tag for Gutenberg standard colour selector\n                                onChange={onChangeBGColor} // onChange event callback\n                            />\n                        </fieldset>\n                    </div>\n                </InspectorControls>\n                <ServerSideRender\n                    block=\"adilrabid/hello-dolly-2-block\"\n                />\n                {/*<p*/}\n                {/*    {...blockProps}*/}\n                {/*    style={{*/}\n                {/*        backgroundColor: attributes.bg_color,*/}\n                {/*        color: attributes.text_color,*/}\n                {/*        padding: '16px 10px',*/}\n                {/*        textAlign: 'center',*/}\n                {/*    }}> Hello Dolly 2.0 </p>*/}\n            </>\n        );\n    },\n    // save: function ({attributes}) {\n    //     const blockProps = useBlockProps.save();\n    //     return <p\n    //         {...blockProps}\n    //         style={{\n    //             backgroundColor: attributes.bg_color,\n    //             color: attributes.text_color,\n    //             padding: '16px 10px',\n    //             textAlign: 'center',\n    //         }}> Hello world (from the frontend)</p>;\n    // },\n});"],"names":["registerBlockType","useBlockProps","AlignmentToolbar","BlockControls","ColorPalette","InspectorControls","ServerSideRender","attributes","bg_color","type","default","text_color","edit","_ref","setAttributes","blockProps","onChangeTextColor","hexColor","onChangeBGColor","createElement","Fragment","key","id","className","onChange","block"],"sourceRoot":""}